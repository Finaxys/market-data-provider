<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:int="http://www.springframework.org/schema/integration"
	xmlns:int-amqp="http://www.springframework.org/schema/integration/amqp"
	xmlns:rabbit="http://www.springframework.org/schema/rabbit"
	xmlns:int-stream="http://www.springframework.org/schema/integration/stream"
	xmlns:cloud="http://schema.cloudfoundry.org /spring" xmlns:int-xml="http://www.springframework.org/schema/integration/xml"
	xsi:schemaLocation="http://www.springframework.org/schema/integration/xml http://www.springframework.org/schema/integration/xml/spring-integration-xml.xsd
		http://www.springframework.org/schema/integration/amqp http://www.springframework.org/schema/integration/amqp/spring-integration-amqp.xsd
		http://schema.cloudfoundry.org /spring 
		http://www.springframework.org/schema/integration http://www.springframework.org/schema/integration/spring-integration.xsd
		http://schema.cloudfoundry.org/spring http://schema.cloudfoundry.org/spring/cloudfoundry-spring.xsd
		http://www.springframework.org/schema/integration/stream http://www.springframework.org/schema/integration/stream/spring-integration-stream.xsd
		http://www.springframework.org/schema/rabbit http://www.springframework.org/schema/rabbit/spring-rabbit.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">


	<!-- rabbit connection factory, rabbit template, and rabbit admin -->
	<import
		resource="classpath:META-INF/spring/service/config/spring-amqp-config-xml.xml" />


	<int:channel id="xmlMarketData" />
	<int:channel id="marketData" />
	<int:channel id="splittedMarketData" />
	<int:channel id="currencypairs" />
	<int:channel id="exchanges" />
	<int:channel id="fxrates" />
	<int:channel id="indexes" />
	<int:channel id="indexquotes" />
	<int:channel id="interbankrates" />
	<int:channel id="interbankratedatas" />
	<int:channel id="optionchains" />
	<int:channel id="options" />
	<int:channel id="optionquotes" />
	<int:channel id="stocks" />
	<int:channel id="stockquotes" />

	<int-xml:unmarshalling-transformer
		id="mdUnmarshaller" input-channel="xmlMarketData" output-channel="marketData"
		unmarshaller="unmarshaller" />

	<bean id="unmarshaller" class="org.springframework.oxm.jaxb.Jaxb2Marshaller">
		<property name="packagesToScan">
			<list>
				<value>com.finaxys.rd.dataextraction.domain</value>
			</list>
		</property>
	</bean>


	<!-- <int-stream:stdout-channel-adapter -->
	<!-- id="stdOut" channel="splittedMarketData" append-newline="true" /> -->
	<int-stream:stdout-channel-adapter
		id="stdut" channel="splittedMarketData" append-newline="true" />

	<int:splitter id="splitter" ref="splitterBean" method="split"
		input-channel="marketData" output-channel="splittedMarketData">
	</int:splitter>

	<bean id="splitterBean"
		class="com.finaxys.rd.marketdataprovider.splitter.GenericSplitter" />


	<int:payload-type-router input-channel="splittedMarketData">
		<int:mapping type="com.finaxys.rd.dataextraction.domain.CurrencyPair"
			channel="currencypairs" />
		<int:mapping type="com.finaxys.rd.dataextraction.domain.Exchange"
			channel="exchanges" />
		<int:mapping type="com.finaxys.rd.dataextraction.domain.FXRate"
			channel="fxrates" />
		<int:mapping type="com.finaxys.rd.dataextraction.domain.Index"
			channel="indexes" />
		<int:mapping type="com.finaxys.rd.dataextraction.domain.IndexQuote"
			channel="indexquotes" />
		<int:mapping type="com.finaxys.rd.dataextraction.domain.InterbankRate"
			channel="interbankrates" />
		<int:mapping type="com.finaxys.rd.dataextraction.domain.InterbankRateData"
			channel="interbankratedatas" />
		<int:mapping type="com.finaxys.rd.dataextraction.domain.OptionChain"
			channel="optionchains" />
		<int:mapping type="com.finaxys.rd.dataextraction.domain.Option"
			channel="options" />
		<int:mapping type="com.finaxys.rd.dataextraction.domain.OptionQuote"
			channel="optionquotes" />
		<int:mapping type="com.finaxys.rd.dataextraction.domain.Stock"
			channel="stocks" />
		<int:mapping type="com.finaxys.rd.dataextraction.domain.StockQuote"
			channel="stockquotes" />
	</int:payload-type-router>




	<int:service-activator input-channel="currencypairs"
		ref="currencyPairService" method="add" />
	<int:service-activator input-channel="exchanges"
		ref="exchangeService" method="add" />
	<int:service-activator input-channel="fxrates"
		ref="fxRateService" method="add" />
	<int:service-activator input-channel="indexes"
		ref="indexService" method="add" />
	<int:service-activator input-channel="indexquotes"
		ref="indexQuoteService" method="add" />
	<int:service-activator input-channel="interbankrates"
		ref="interbankRateService" method="add" />
	<int:service-activator input-channel="interbankratedatas"
		ref="interbankRateDataService" method="add" />
	<int:service-activator input-channel="optionchains"
		ref="optionChainService" method="add" />
	<int:service-activator input-channel="options"
		ref="optionService" method="add" />
	<int:service-activator input-channel="optionquotes"
		ref="optionQuoteService" method="add" />
	<int:service-activator input-channel="stocks"
		ref="stockService" method="add" />
	<int:service-activator input-channel="stockquotes"
		ref="stockQuoteService" method="add" />









	<!-- To receive AMQP Messages from a Queue, configure an inbound-channel-adapter -->
	<int-amqp:inbound-channel-adapter
		queue-names="#{xmlMarketDataQueue.getName()}" channel="xmlMarketData" concurrent-consumers="10"
		connection-factory="rabbitConnectionFactory" acknowledge-mode="AUTO"  />

	<bean id="headerMapper"
		class="org.springframework.integration.amqp.support.DefaultAmqpHeaderMapper">
		<property name="requestHeaderNames" value="*" />
		<property name="replyHeaderNames" value="*" />
	</bean>

	<!-- rabbit exchanges, queues, and bindings used by this app -->
	<rabbit:topic-exchange name="market-data">
		<rabbit:bindings>
			<rabbit:binding queue="xmlMarketDataQueue" pattern="marketdata.xml.#" />
		</rabbit:bindings>
	</rabbit:topic-exchange>



	<rabbit:queue id="xmlMarketDataQueue" auto-declare="true" exclusive="true"   />








</beans>